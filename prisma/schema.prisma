// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum ServiceType {
    PRESENT
    CATERING
    MERCHANDISING
    EVENT
}

model User {
    id               String       @id @default(cuid())
    name             String
    lastName         String
    email            String       @unique
    business         String
    image            String?
    hashedPassword   String
    role             Role         @default(USER)
    points           Int          @default(0)
    serviceId        String?
    favoriteServices Service[]
    contactNumber    String?
    cards            CreditCard[]
    Order            Order[]
    preOrder         preOrder[]

    @@map("users")
}

model CreditCard {
    id     String  @id @default(cuid())
    number String  @unique
    cvv    Int
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
    Order  Order[]

    @@map("cards")
}

model Provider {
    id       String    @id @default(cuid())
    name     String    @unique
    services Service[]

    @@map("providers")
}

model Service {
    id            String      @id @default(cuid())
    type          ServiceType
    image         String[]
    name          String      @unique
    description   String      @default("No hay descripci√≥n")
    price         Int
    qualification Float
    aditionals    Aditional[]
    provider      Provider    @relation(fields: [providerId], references: [id])
    providerId    String
    favoritedBy   User[]
    Order         Order[]
    preOrder      preOrder[]
    deliveryPrice Int         @default(100)

    @@map("services")
}

model Aditional {
    id         String    @id @default(cuid())
    name       String    @unique
    price      Int
    Service    Service?  @relation(fields: [serviceId], references: [id])
    serviceId  String?
    Order      Order?    @relation(fields: [orderId], references: [id])
    orderId    String?
    preOrder   preOrder? @relation(fields: [preOrderId], references: [id])
    preOrderId String?

    @@map("aditionals")
}

model Order {
    id String @id @default(cuid())

    service    Service     @relation(fields: [serviceId], references: [id])
    aditionals Aditional[]
    serviceId  String
    amount     Int

    user         User       @relation(fields: [userId], references: [id])
    payment      CreditCard @relation(fields: [creditCardId], references: [id])
    creditCardId String
    userId       String

    contactNumber String
    rut           String?
    socialReason  String?
    deliveryDate  DateTime
    direction     String
    sorprise      Boolean  @default(false)
    message       String?
    logo          String?
    tryAgain      Boolean  @default(false)

    @@map("orders")
}

model preOrder {
    id String @id @default(cuid())

    service    Service     @relation(fields: [serviceId], references: [id])
    aditionals Aditional[]
    serviceId  String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    amount Int

    @@map("preOrders")
}
